#!/usr/bin/env node

var child_process = require('child_process');
var path = require('path');
var fs = require('fs');

var webpack = require('webpack');
var chokidar = require('chokidar');

require('babel-register');
var config = require('../config/webpack/server.babel.js').default;

// restart the server on changes to files in this path
var WATCH_PATH = 'src/server';

var outputOptions = {
  colors: true,
  cached: false,
  modules: false,
  chunks: false,
  children: false,
  hash: false,
  version: false,
  exclude: ['node_modules'],
};

// node server child process
var server;

// build the client and server apps
var compiler = webpack(require('../config/webpack/index.js'));
rebuild();

/**
 * Compile the server and then restart it
 */

function rebuild() {
  if (server) {
    server.kill('SIGTERM');
  }

  compiler.run(function (err, stats) {
    if (err) {
      console.error(err.stack || err);
      if (err.details) {
        console.error(err.details);
      }
      return;
    }

    // print stats
    process.stdout.write(stats.toString(outputOptions) + '\n');

    if (server) {
      server.kill('SIGTERM');
    }

    runServer();

    function runServer() {
      var configPath = path.join(config.output.path, config.output.filename);
      var args = [configPath];
      if (process.argv.length > 2) {
        args.push(process.argv.slice(2));
      }

      var opts = {
        env: Object.assign({ NODE_ENV: 'development'}, process.env),
        stdio: 'inherit',
      };

      server = child_process.spawn('node', args, opts);
    }

    /**
     * Restart when `rs` is entered
     */

    process.stdin.on('data', function (data) {
      var parsedData = (data + '').trim().toLowerCase();

      if (parsedData === 'rs') {
        if (server) {
          server.kill('SIGTERM');
        }
        runServer();
      }
    });

    process.stdin.setEncoding('utf8');

  });
}

/**
 * Rebuild on filesystem changes
 */

var watchDir = path.resolve(__dirname, '..', WATCH_PATH);

chokidar.watch(watchDir).on('change', function (event, path) {
  rebuild();
});

/**
 * Kill the server on exit
 */

process.on('exit', function () {
  if (server) {
    server.kill('SIGTERM');
    process.exit(server.status);
  }
});
